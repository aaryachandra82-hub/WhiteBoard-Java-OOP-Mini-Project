import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

class DrawPoint {
    int x, y, size;
    Color color;

    DrawPoint(int x, int y, Color color, int size) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.size = size;
    }
}

public class DigitalWhiteboardPro extends JFrame {
    private ArrayList<DrawPoint> points = new ArrayList<>();
    private ArrayList<DrawPoint> redoStack = new ArrayList<>();
    private Color currentColor = Color.BLACK;
    private int brushSize = 5;
    private boolean eraserMode = false;
    private int mouseX = -1, mouseY = -1;

    private Image backgroundImage = null; // âœ… New: store loaded image
    private JPanel drawPanel;
    private JLabel sizeLabel;
    private JSlider sizeSlider;

    public DigitalWhiteboardPro() {
        setTitle("ðŸŽ¨ Digital Whiteboard Pro");
        setSize(1000, 700);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // ======= Toolbar =======
        JToolBar toolbar = new JToolBar();
        toolbar.setFloatable(false);

        JButton colorBtn = new JButton("ðŸŽ¨ Color");
        JButton eraseBtn = new JButton("ðŸ§½ Eraser");
        JButton clearBtn = new JButton("ðŸ—‘ Clear");
        JButton undoBtn = new JButton("â†© Undo");
        JButton redoBtn = new JButton("â†ª Redo");
        JButton saveBtn = new JButton("ðŸ’¾ Save");
        JButton loadBtn = new JButton("ðŸ“‚ Load");

        sizeLabel = new JLabel("Brush: 5");
        sizeSlider = new JSlider(1, 50, brushSize);
        sizeSlider.setMajorTickSpacing(10);
        sizeSlider.setMinorTickSpacing(1);
        sizeSlider.setPaintTicks(true);
        sizeSlider.setPaintLabels(true);
        sizeSlider.addChangeListener(e -> {
            brushSize = sizeSlider.getValue();
            sizeLabel.setText("Brush: " + brushSize);
        });

        toolbar.add(colorBtn);
        toolbar.add(eraseBtn);
        toolbar.add(clearBtn);
        toolbar.add(undoBtn);
        toolbar.add(redoBtn);
        toolbar.add(saveBtn);
        toolbar.add(loadBtn);
        toolbar.add(sizeLabel);
        toolbar.add(sizeSlider);

        add(toolbar, BorderLayout.NORTH);

        // ======= Drawing Panel =======
        drawPanel = new JPanel() {
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2 = (Graphics2D) g;
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                // âœ… Draw loaded background image
                if (backgroundImage != null) {
                    g2.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), null);
                }

                // Draw points
                for (DrawPoint p : points) {
                    g2.setColor(p.color);
                    g2.fillOval(p.x, p.y, p.size, p.size);
                }

                // Brush preview
                if (mouseX >= 0 && mouseY >= 0) {
                    g2.setColor(currentColor);
                    g2.drawOval(mouseX - brushSize / 2, mouseY - brushSize / 2, brushSize, brushSize);
                }
            }
        };
        drawPanel.setBackground(Color.WHITE);

        drawPanel.addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseDragged(MouseEvent e) {
                Color drawColor = eraserMode ? Color.WHITE : currentColor;
                points.add(new DrawPoint(e.getX(), e.getY(), drawColor, brushSize));
                mouseX = e.getX();
                mouseY = e.getY();
                repaint();
            }

            public void mouseMoved(MouseEvent e) {
                mouseX = e.getX();
                mouseY = e.getY();
                repaint();
            }
        });

        drawPanel.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                redoStack.clear(); // clear redo when new draw starts
            }

            public void mouseExited(MouseEvent e) {
                mouseX = -1;
                mouseY = -1;
                repaint();
            }
        });

        add(drawPanel, BorderLayout.CENTER);

        // ======= Button Actions =======
        colorBtn.addActionListener(e -> {
            Color selected = JColorChooser.showDialog(null, "Choose Color", currentColor);
            if (selected != null) {
                currentColor = selected;
                eraserMode = false;
            }
        });

        eraseBtn.addActionListener(e -> eraserMode = !eraserMode);

        clearBtn.addActionListener(e -> {
            points.clear();
            redoStack.clear();
            backgroundImage = null;
            repaint();
        });

        undoBtn.addActionListener(e -> undo());
        redoBtn.addActionListener(e -> redo());
        saveBtn.addActionListener(e -> saveImage());
        loadBtn.addActionListener(e -> loadImage());

        // ======= Keyboard Shortcuts =======
        addKeyBindings(drawPanel);

        setVisible(true);
    }

    private void addKeyBindings(JPanel panel) {
        InputMap im = panel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap am = panel.getActionMap();

        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_DOWN_MASK), "undo");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, InputEvent.CTRL_DOWN_MASK), "redo");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_E, 0), "eraser");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, 0), "clear");
        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_DOWN_MASK), "save");

        am.put("undo", new AbstractAction() { public void actionPerformed(ActionEvent e) { undo(); }});
        am.put("redo", new AbstractAction() { public void actionPerformed(ActionEvent e) { redo(); }});
        am.put("eraser", new AbstractAction() { public void actionPerformed(ActionEvent e) { eraserMode = !eraserMode; }});
        am.put("clear", new AbstractAction() { public void actionPerformed(ActionEvent e) { points.clear(); backgroundImage = null; repaint(); }});
        am.put("save", new AbstractAction() { public void actionPerformed(ActionEvent e) { saveImage(); }});
    }

    // ======= Undo / Redo =======
    private void undo() {
        if (!points.isEmpty()) {
            redoStack.add(points.remove(points.size() - 1));
            repaint();
        }
    }

    private void redo() {
        if (!redoStack.isEmpty()) {
            points.add(redoStack.remove(redoStack.size() - 1));
            repaint();
        }
    }

    // ======= Save Image =======
    private void saveImage() {
        try {
            BufferedImage image = new BufferedImage(drawPanel.getWidth(), drawPanel.getHeight(), BufferedImage.TYPE_INT_ARGB);
            Graphics2D g2 = image.createGraphics();
            drawPanel.paint(g2); // âœ… includes background + drawings
            g2.dispose();

            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new FileNameExtensionFilter("PNG Image", "png"));
            if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                if (!file.getName().toLowerCase().endsWith(".png")) {
                    file = new File(file.getAbsolutePath() + ".png");
                }
                ImageIO.write(image, "PNG", file);
                JOptionPane.showMessageDialog(this, "Saved successfully!");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error saving: " + ex.getMessage());
        }
    }

    // ======= Load Image =======
    private void loadImage() {
        try {
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(new FileNameExtensionFilter("PNG or JPG", "png", "jpg", "jpeg"));
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                backgroundImage = ImageIO.read(chooser.getSelectedFile());
                points.clear();
                redoStack.clear();
                repaint();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error loading: " + ex.getMessage());
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(DigitalWhiteboardPro::new);
    }
}
